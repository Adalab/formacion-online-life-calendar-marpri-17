{"version":3,"sources":["components/MoodList.js","components/EditorForm.js","components/App.js","index.js"],"names":["MoodList","props","className","to","userData","map","date","moodWithDate","dateKey","Object","keys","toString","key","renderMoodinIcon","EditorForm","state","mood","message","showMessage","buttonSubmit","React","createRef","buttonReturn","handleChangeDate","bind","handleShowMessage","handleUserMessageInput","handleSubmit","ev","this","dateSelected","target","value","includes","console","log","setState","mainButton","current","disabled","focus","handleSaveData","preventDefault","newDay","innerHTML","actualDate","onSubmit","htmlFor","type","defaultValue","name","onChange","id","onClick","ref","Component","App","getActualDate","renderFormDay","renderMoodList","Date","getDay","getDate","getMonth","currentDay","getFullYear","savedData","JSON","parse","localStorage","getItem","newDayConfiguredByUser","newUserData","concat","setItem","stringify","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.95d581df.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/moodlist.scss'\n\nfunction renderMoodinIcon(moodWithDate) {\n    const date = Object.keys(moodWithDate);\n    const dateKey = date[0].toString(); // Asegurarse de que la fecha sea siempre la primera propiedad del objeto\n    if (moodWithDate[dateKey] === \"good\") {\n        return <li key={dateKey} >\n            <div className=\"mood__face good\">\n                <p className=\"mood__face_facial\">:)</p>\n            </div>\n        </li>\n    } else if (moodWithDate[dateKey] === \"bad\") {\n        return <li key={dateKey}>\n            <div className=\"mood__face bad\">\n                <p className=\"mood__face_facial\">:(</p>\n            </div>\n        </li>\n    }\n}\n\nconst MoodList = (props) => {\n    return (<section className=\"mood\">\n        <nav className=\"mood__editor_link_wrapper\">\n            <Link to=\"/today\" className=\"mood__editor_link\"><div className=\"mood__editor_link_text\">+</div></Link>\n        </nav>\n        <p>Are you happy?</p>\n        <ul className=\"mood__list\">\n            {props.userData.map(date => renderMoodinIcon(date))}\n        </ul>\n\n    </section>)\n}\n\nexport default MoodList;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/EditorForm.scss';\n\nclass EditorForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: \"\",\n            mood: \"\",\n            message: \"\",\n            showMessage: false,\n        }\n        this.buttonSubmit = React.createRef();\n        this.buttonReturn = React.createRef();\n        this.handleChangeDate = this.handleChangeDate.bind(this);\n        this.handleShowMessage = this.handleShowMessage.bind(this);\n        this.handleUserMessageInput = this.handleUserMessageInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChangeDate(ev) {\n        const { userData } = this.props;\n        const dateSelected = ev.target.value;\n        const datesSavedByUser = userData.map(date => {\n            const dateKeys = Object.keys(date);\n            const dateKey = dateKeys[0].toString();\n            return dateKey;\n        })\n        if (datesSavedByUser.includes(dateSelected)) {\n            console.log(\"Ya existe esta fecha\")\n        } else {\n            this.setState({\n                date: dateSelected,\n            })\n        };\n    }\n\n    handleShowMessage(ev) {\n        const mainButton = this.buttonSubmit.current;\n        mainButton.disabled = false;\n        const mood = ev.target.value;\n        if (mood === \"good\") {\n            this.setState({\n                mood: \"good\",\n                showMessage: true\n            })\n        } else if (mood === \"bad\") {\n            mainButton.focus();\n            this.setState({\n                mood: \"bad\",\n                showMessage: false\n            })\n        }\n    }\n\n    handleUserMessageInput(ev) {\n        this.setState({\n            message: ev.target.value\n        }, () => console.log(this.state))\n    }\n\n    handleSubmit(ev) {\n        debugger\n        const { handleSaveData } = this.props;\n        ev.preventDefault();\n        const { date, mood, message } = this.state;\n        const newDay = { [date]: mood, \"message\": message }\n        const buttonReturn = this.buttonReturn.current;\n        buttonReturn.innerHTML = \"volver\"\n        return handleSaveData(newDay)\n\n    }\n\n    render() {\n        console.log(this.props)\n        const { actualDate } = this.props;\n        return (\n            <form onSubmit={this.handleSubmit} className=\"editor__form\">\n                <p>Add new mood for Today</p>\n                <p>{actualDate}</p>\n                <label htmlFor=\"selected_date\">Fecha</label>\n                <input type=\"date\" className=\"editor__form_inputdate\" defaultValue={actualDate} name=\"selected_date\" onChange={this.handleChangeDate} />\n                {(this.state.date !== \"\") ? <>\n                    <label htmlFor=\"mood\" className=\"editor__form_moodtitle\">Estado de Ã¡nimo\n                        <label ><input type=\"radio\" id=\"mood good\" className=\"mood__radio\" name=\"mood\" onChange={this.handleShowMessage} value=\"good\" />:)</label>\n                        <label><input type=\"radio\" id=\"mood bad\" className=\"mood__radio\" name=\"mood\" onChange={this.handleShowMessage} value=\"bad\" />:(</label>\n                    </label>\n                </> : \"\"}\n                {(this.state.showMessage) ?\n                    <label htmlFor=\"mood_message\">Mensaje\n                    <input type=\"text\" name=\"mood_message\" onChange={this.handleUserMessageInput} />\n                    </label>\n                    : \"\"\n                }\n                <button to=\"/\" className=\"editor__form_buttonsubmit\" onClick={this.handleSubmit} ref={this.buttonSubmit} disabled > guardar</button>\n                <Link to=\"/\" ref={this.buttonReturn}>cancelar</Link>\n\n            </form>\n        )\n    }\n}\n\n\nexport default EditorForm;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport MoodList from './MoodList';\nimport EditorForm from './EditorForm';\nimport '../stylesheets/App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actualDate: \"\",\n      userData: [{\n        \"2019-10-25\": \"bad\"\n      }, {\n        \"2019-10-29\": \"good\",\n        \"message\": \"Having\"\n      }, {\n        \"2019-10-28\": \"bad\"\n      },\n      {\n        \"2019-10-31\": \"good\",\n        \"message\": \"It's Hallowen!\"\n      }]\n    }\n\n    this.handleSaveData = this.handleSaveData.bind(this);\n    this.getActualDate = this.getActualDate.bind(this);\n    this.renderFormDay = this.renderFormDay.bind(this);\n    this.renderMoodList = this.renderMoodList.bind(this);\n  }\n\n  getActualDate() {\n    const date = new Date();\n    const getDay = date.getDate();\n    const getMonth = date.getMonth() + 1;\n    const getYear = date.getFullYear();\n    const currentDay = getYear + \"-\" + getMonth + \"-\" + getDay;\n    console.log(currentDay)\n    const savedData = JSON.parse(localStorage.getItem(\"LSuserData\"));\n    console.log(savedData)\n    savedData ? this.setState({\n      actualDate: currentDay,\n      userData: savedData\n    }) :\n      this.setState({\n        actualDate: currentDay,\n      })\n  }\n\n  componentDidMount() {\n    this.getActualDate();\n\n  }\n\n  handleSaveData(newDayConfiguredByUser) {\n    const { userData } = this.state;\n    const newUserData = userData.concat(newDayConfiguredByUser);\n    console.log(newUserData)\n    this.setState({\n      userData: newUserData\n    }, () => localStorage.setItem(\"LSuserData\", JSON.stringify(this.state.userData)))\n\n  }\n\n  renderMoodList() {\n    return (<MoodList userData={this.state.userData} />)\n  }\n\n  renderFormDay() {\n    return (<EditorForm actualDate={this.state.actualDate} userData={this.state.userData} handleSaveData={this.handleSaveData} />)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {(this.state.actualDate) ?\n          <Switch>\n            <Route exact path=\"/\" render={this.renderMoodList} />\n            <Route exact path=\"/today\" render={this.renderFormDay} />\n          </Switch> : \"Cargando\"\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './stylesheets/core/index.scss';\nimport App from './components/App';\n\nReactDOM.render(<HashRouter ><App /></HashRouter>, document.getElementById('root'));\n"],"sourceRoot":""}