{"version":3,"sources":["components/MoodList.js","components/Details.js","components/EditorForm.js","components/App.js","index.js"],"names":["MoodList","props","className","to","userData","map","date","moodWithDate","mood","key","id","actualDate","Details","dayToRender","children","defaultMessage","message","type","value","readOnly","renderDetails","EditorForm","state","showMessage","isDateSaved","buttonSubmit","React","createRef","buttonReturn","form","handleChangeDate","bind","handleShowMessage","handleUserMessageInput","handleSubmit","renderSavedData","this","find","day","ev","dateSelected","target","datesSavedByUser","console","log","includes","current","innerHTML","setState","mainButton","disabled","focus","handleSaveData","preventDefault","newDay","ref","onSubmit","htmlFor","name","onChange","Component","App","getActualDate","renderFormDay","renderMoodList","Date","getDay","getDate","getMonth","currentDay","getFullYear","savedData","JSON","parse","localStorage","getItem","newDayConfiguredByUser","newUserData","concat","setItem","stringify","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9bd212b1.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/moodlist.scss'\n\nfunction renderMoodinIcon(moodWithDate) {\n    if (moodWithDate.mood === \"good\") {\n        return <li key={moodWithDate.id} >\n            <div className=\"mood__face good\">\n                <p className=\"mood__face_facial\">:)</p>\n            </div>\n        </li>\n    } else if (moodWithDate.mood === \"bad\") {\n        return <li key={moodWithDate.id}>\n            <div className=\"mood__face bad\">\n                <p className=\"mood__face_facial\">:(</p>\n            </div>\n        </li>\n    }\n}\n\nconst MoodList = (props) => {\n    return (<section className=\"mood\">\n        <nav className=\"mood__editor_link_wrapper\">\n            <Link to=\"/today\" className=\"mood__editor_link\"><div className=\"mood__editor_link_text\">+</div></Link>\n        </nav>\n        <p>Are you happy?</p>\n        <ul className=\"mood__list\">\n            {props.userData.map(date => renderMoodinIcon(date))}\n        </ul>\n        <p className=\"editor__form_today\"> {props.actualDate}</p>\n\n    </section>)\n}\n\nexport default MoodList;","import React from 'react';\n\nfunction renderDetails(dayToRender) {\n    let defaultMessage = dayToRender.message || \" !! Olvidaste apuntarlo\"\n    if (dayToRender.mood === \"good\") {\n        return <>\n            <div>\n                <div className=\"mood__face good\">\n                    <p className=\"mood__face_facial\">:)</p>\n                </div>\n                <p>{dayToRender.mood}</p>\n            </div>\n            <div>\n                <h6> Gran acontecimiento:</h6>\n                <input type=\"textarea\" value={defaultMessage} readOnly ></input>\n            </div>\n        </>\n    } else if (dayToRender.mood === \"bad\") {\n        return <div>\n            <div className=\"mood__face bad\">\n                <p className=\"mood__face_facial\">:(</p>\n            </div>\n            <p>{dayToRender.mood}</p>\n        </div>\n    }\n\n}\n\nconst Details = (props) => {\n    const { dayToRender } = props;\n    return (\n        <>\n            <h4>{props.children}</h4>\n            <p>{dayToRender.id}</p>\n            {renderDetails(dayToRender)}\n\n        </>\n    )\n}\n\nexport default Details;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/EditorForm.scss';\nimport Details from './Details';\n\nclass EditorForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: \"\",\n            mood: \"\",\n            message: \"\",\n            showMessage: false,\n            isDateSaved: false,\n        }\n        this.buttonSubmit = React.createRef();\n        this.buttonReturn = React.createRef();\n        this.form = React.createRef();\n        this.handleChangeDate = this.handleChangeDate.bind(this);\n        this.handleShowMessage = this.handleShowMessage.bind(this);\n        this.handleUserMessageInput = this.handleUserMessageInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.renderSavedData = this.renderSavedData.bind(this);\n    }\n    renderSavedData() {\n        debugger;\n        const { userData } = this.props;\n        const dayToRender = userData.find(day => day.id === this.state.date)\n        return (<Details dayToRender={dayToRender}>Detalles guardados</Details>)\n    }\n\n\n    handleChangeDate(ev) {\n        const { userData } = this.props;\n        const dateSelected = ev.target.value;\n        const datesSavedByUser = userData.map(date => date.id)\n        console.log(datesSavedByUser)\n        if (datesSavedByUser.includes(dateSelected)) {\n            console.log(\"est√° guardada\")\n            const buttonReturn = this.buttonReturn.current;\n            buttonReturn.innerHTML = \"<i class='fas fa-chevron-circle-left backIcon'></i>volver\"\n            this.setState({\n                date: dateSelected,\n                isDateSaved: true,\n            })\n        } else {\n            console.log(\"nueva\")\n            this.setState({\n                date: dateSelected,\n                isDateSaved: false,\n            })\n        };\n    }\n\n    handleShowMessage(ev) {\n        const mainButton = this.buttonSubmit.current;\n        mainButton.disabled = false;\n        const mood = ev.target.value;\n        if (mood === \"good\") {\n            this.setState({\n                mood: \"good\",\n                showMessage: true\n            })\n        } else if (mood === \"bad\") {\n            mainButton.focus();\n            this.setState({\n                mood: \"bad\",\n                showMessage: false\n            })\n        }\n    }\n\n    handleUserMessageInput(ev) {\n        this.setState({\n            message: ev.target.value\n        })\n    }\n\n    handleSubmit(ev) {\n        const { handleSaveData } = this.props;\n        ev.preventDefault();\n        const { date, mood, message } = this.state;\n        const newDay = { id: date, mood: mood, message: message }\n        const buttonReturn = this.buttonReturn.current;\n        buttonReturn.innerHTML = \"<i class='fas fa-chevron-circle-left backIcon'></i>volver\"\n        this.setState({\n            showMessage: false,\n            isDateSaved: true,\n        })\n        // const form = this.form.current;\n        // form.reset();\n        return handleSaveData(newDay)\n\n    }\n\n    render() {\n        const { actualDate } = this.props;\n        return (\n            <form className=\"editor__form\" ref={this.form} onSubmit={this.handleSubmit}>\n                <p>Add new mood for Today</p>\n                <p> Hoy es <small className=\"editor__form_today\">{actualDate}</small></p>\n                <label htmlFor=\"selected_date\">Fecha</label>\n                <input type=\"date\" className=\"editor__form_inputdate\" name=\"selected_date\" onChange={this.handleChangeDate} />\n                {\n                    (this.state.isDateSaved === true) ? this.renderSavedData() :\n                        (this.state.date !== \"\") ? <>\n                            <label htmlFor=\"mood\" className=\"editor__form_moodtitle\">Estado de √°nimo\n                                <label ><input type=\"radio\" id=\"mood good\" className=\"mood__radio\" name=\"mood\" onChange={this.handleShowMessage} value=\"good\" />:)</label>\n                                <label><input type=\"radio\" id=\"mood bad\" className=\"mood__radio\" name=\"mood\" onChange={this.handleShowMessage} value=\"bad\" />:(</label>\n                            </label>\n                            {(this.state.showMessage) ?\n                                <label htmlFor=\"mood_message\">Mensaje\n                                <input type=\"text\" name=\"mood_message\" onChange={this.handleUserMessageInput} />\n                                </label>\n                                : \"\"}\n                            <button to=\"/\" className=\"editor__form_buttonsubmit\" ref={this.buttonSubmit} disabled > guardar</button>\n                        </> : \"\"}\n\n\n                <Link to=\"/\" ref={this.buttonReturn} className=\"editor__form_returnbutton\">cancelar</Link>\n\n            </form>\n        )\n    }\n}\n\n\nexport default EditorForm;\n\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport MoodList from './MoodList';\nimport EditorForm from './EditorForm';\nimport '../stylesheets/App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actualDate: \"\",\n      userData: [{\n        id: \"2019-10-25\",\n        mood: \"bad\",\n        message: \"\"\n      }, {\n        id: \"2019-10-29\",\n        mood: \"good\",\n        message: \"Otro d√≠a programando :D\"\n      }, {\n        id: \"2019-10-30\",\n        mood: \"good\",\n        message: \"Gato!\"\n      },\n      {\n        id: \"2019-10-31\",\n        mood: \"good\",\n        message: \"It's Hallowen!\"\n      },\n      {\n        id: \"2019-11-01\",\n        mood: \"bad\",\n        message: \"\"\n      }]\n    }\n\n    this.handleSaveData = this.handleSaveData.bind(this);\n    this.getActualDate = this.getActualDate.bind(this);\n    this.renderFormDay = this.renderFormDay.bind(this);\n    this.renderMoodList = this.renderMoodList.bind(this);\n  }\n\n  getActualDate() {\n    const date = new Date();\n    const getDay = date.getDate();\n    const getMonth = date.getMonth() + 1;\n    const getYear = date.getFullYear();\n    const currentDay = getYear + \"-\" + getMonth + \"-\" + getDay;\n    console.log(currentDay)\n    const savedData = JSON.parse(localStorage.getItem(\"LSuserData\"));\n    savedData ? this.setState({\n      actualDate: currentDay,\n      userData: savedData\n    }) :\n      this.setState({\n        actualDate: currentDay,\n      })\n  }\n\n  componentDidMount() {\n    this.getActualDate();\n\n  }\n\n  handleSaveData(newDayConfiguredByUser) {\n    debugger;\n    const { userData } = this.state;\n    const newUserData = userData.concat(newDayConfiguredByUser);\n    console.log(newUserData)\n    this.setState({\n      userData: newUserData\n    }, () => localStorage.setItem(\"LSuserData\", JSON.stringify(this.state.userData)))\n\n  }\n\n  renderMoodList() {\n    return (<MoodList userData={this.state.userData} actualDate={this.state.actualDate} />)\n  }\n\n  renderFormDay() {\n    return (<EditorForm actualDate={this.state.actualDate} userData={this.state.userData} handleSaveData={this.handleSaveData} />)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {(this.state.actualDate) ?\n          <Switch>\n            <Route exact path=\"/\" render={this.renderMoodList} />\n            <Route exact path=\"/today\" render={this.renderFormDay} />\n          </Switch> : \"Cargando\"\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './stylesheets/core/index.scss';\nimport App from './components/App';\n\nReactDOM.render(<HashRouter ><App /></HashRouter>, document.getElementById('root'));\n"],"sourceRoot":""}